#!/bin/bash
# Install packages before setting up dotfiles

set -euo pipefail

# Skip package installation in CI if requested
if [[ -n "${CI_SKIP_PACKAGES:-}" ]]; then
    echo "=== Skipping package installation (CI_SKIP_PACKAGES set) ==="
    exit 0
fi

echo "=== Installing packages ==="

{{- if eq .chezmoi.os "darwin" }}
# macOS: Use Homebrew
if ! command -v brew >/dev/null 2>&1; then
    echo "Installing Homebrew..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

    # Add Homebrew to PATH for this session
    if [[ -f "{{ .homebrew_prefix }}/bin/brew" ]]; then
        eval "$({{ .homebrew_prefix }}/bin/brew shellenv)"
    fi
fi

echo "Installing packages from Brewfile..."
# Use --no-upgrade to avoid conflicts with existing installations
brew bundle --file="{{ .chezmoi.sourceDir }}/homebrew/{{ if .business_use }}Brewfile.work{{ else }}Brewfile{{ end }}" --no-upgrade || {
    echo "Warning: Some packages failed to install. This is often due to already installed packages."
    echo "You can run 'brew bundle check' to see what's missing."
}

{{- else if eq .chezmoi.os "linux" }}
# Linux: Use native package managers (no Homebrew)

# Function to install alacritty terminfo
install_alacritty_terminfo() {
    echo "Checking alacritty terminfo..."
    if infocmp alacritty >/dev/null 2>&1; then
        echo "alacritty terminfo is already installed"
        return 0
    fi

    echo "Installing alacritty terminfo..."
    local temp_file=$(mktemp)
    
    # Download alacritty.info from official repository
    if curl -sSL https://raw.githubusercontent.com/alacritty/alacritty/master/extra/alacritty.info -o "$temp_file"; then
        # Install terminfo (tic will create the necessary directories)
        if command -v tic >/dev/null 2>&1; then
            tic -x "$temp_file" 2>/dev/null || sudo tic -x "$temp_file" || {
                echo "Warning: Failed to install alacritty terminfo"
                echo "You may need to install it manually with: curl -sSL https://raw.githubusercontent.com/alacritty/alacritty/master/extra/alacritty.info | sudo tic -x -"
            }
        else
            echo "Warning: 'tic' command not found. Please install ncurses package"
        fi
    else
        echo "Warning: Failed to download alacritty terminfo file"
    fi
    
    rm -f "$temp_file"
}

# Function to install atuin on Linux (not available in most repos)
install_atuin_linux() {
    if command -v atuin >/dev/null 2>&1; then
        echo "atuin is already installed"
        return 0
    fi

    echo "Installing atuin via precompiled binary..."

    # Create temporary directory
    local temp_dir=$(mktemp -d)
    cd "$temp_dir"

    # Download and install atuin
    curl -LsSf https://setup.atuin.sh | sh || {
        echo "Warning: Failed to install atuin via setup script"
        # Fallback: try to install via cargo if available
        if command -v cargo >/dev/null 2>&1; then
            echo "Attempting to install atuin via cargo..."
            cargo install atuin || echo "Warning: Failed to install atuin via cargo"
        fi
    }

    # Cleanup
    cd - >/dev/null
    rm -rf "$temp_dir"
}

if command -v apt >/dev/null 2>&1; then
    echo "Using apt package manager..."
    sudo apt update

    # Configure locale to fix ja_JP.UTF-8 warnings
    echo "Configuring Japanese locale..."
    if ! locale -a | grep -q "ja_JP.utf8"; then
        # Enable Japanese locale in /etc/locale.gen
        sudo sed -i 's/^# ja_JP.UTF-8 UTF-8/ja_JP.UTF-8 UTF-8/' /etc/locale.gen 2>/dev/null || true
        # Generate locales
        sudo locale-gen 2>/dev/null || true
        echo "Japanese locale configured"
    else
        echo "Japanese locale already available"
    fi

    # Install packages from apt.txt
    echo "Installing packages from apt.txt..."
    while IFS= read -r package || [[ -n "$package" ]]; do
        # Skip comments and empty lines
        [[ "$package" =~ ^[[:space:]]*# ]] || [[ -z "$package" ]] && continue
        echo "Installing: $package"
        sudo apt install -y "$package" || echo "Warning: Failed to install $package"
    done < "{{ .chezmoi.sourceDir }}/packages/apt.txt"

    # Install alacritty terminfo
    install_alacritty_terminfo

    # Install atuin separately (not available in apt repos)
    install_atuin_linux

elif command -v dnf >/dev/null 2>&1; then
    echo "Using dnf package manager..."

    # Install packages from dnf.txt
    echo "Installing packages from dnf.txt..."
    while IFS= read -r package || [[ -n "$package" ]]; do
        # Skip comments and empty lines
        [[ "$package" =~ ^[[:space:]]*# ]] || [[ -z "$package" ]] && continue
        echo "Installing: $package"
        sudo dnf install -y "$package" || echo "Warning: Failed to install $package"
    done < "{{ .chezmoi.sourceDir }}/packages/dnf.txt"

    # Install alacritty terminfo
    install_alacritty_terminfo

    # Install atuin separately (not available in dnf repos)
    install_atuin_linux

elif command -v pacman >/dev/null 2>&1; then
    echo "Using pacman package manager..."

    # Install packages from pacman.txt
    echo "Installing packages from pacman.txt..."
    while IFS= read -r package || [[ -n "$package" ]]; do
        # Skip comments and empty lines
        [[ "$package" =~ ^[[:space:]]*# ]] || [[ -z "$package" ]] && continue
        echo "Installing: $package"
        sudo pacman -S --noconfirm "$package" || echo "Warning: Failed to install $package"
    done < "{{ .chezmoi.sourceDir }}/packages/pacman.txt"

    # Install alacritty terminfo
    install_alacritty_terminfo

else
    echo "No supported package manager found. Please install dependencies manually."
    echo "Required packages listed in {{ .chezmoi.sourceDir }}/packages/"
fi

# Install latest NeoVim on Linux
echo "=== Installing latest NeoVim ==="
if [[ -f "{{ .chezmoi.sourceDir }}/scripts/install_neovim_latest.sh" ]]; then
    echo "Running latest NeoVim installation script..."
    bash "{{ .chezmoi.sourceDir }}/scripts/install_neovim_latest.sh" || {
        echo "Warning: Latest NeoVim installation may have failed"
        echo "Falling back to package manager version if available"
    }
else
    echo "Warning: NeoVim installation script not found"
fi

# Install latest fzf on Linux
echo "=== Installing latest fzf ==="
echo "Installing fzf from GitHub releases..."
FZF_VERSION=$(curl -s "https://api.github.com/repos/junegunn/fzf/releases/latest" | grep -Po '"tag_name": "v\K[^"]*' || echo "0.56.3")
FZF_URL="https://github.com/junegunn/fzf/releases/download/v${FZF_VERSION}/fzf-${FZF_VERSION}-linux_amd64.tar.gz"

if curl -fsSL "$FZF_URL" | sudo tar -xz -C /usr/local/bin fzf; then
    echo "✓ fzf v${FZF_VERSION} installed to /usr/local/bin/fzf"
    # Ensure /usr/local/bin/fzf takes precedence over system package
    if command -v update-alternatives >/dev/null 2>&1; then
        sudo update-alternatives --install /usr/bin/fzf fzf /usr/local/bin/fzf 100 2>/dev/null || true
    fi
else
    echo "Warning: fzf installation failed, falling back to system package if available"
fi

# Install special tools on Linux using unified installer
echo "=== Installing Linux tools (gh, mise, ghq, delta, lazygit) ==="
if [[ -f "{{ .chezmoi.sourceDir }}/scripts/install_linux_tools.sh" ]]; then
    echo "Running unified Linux tools installation script..."
    bash "{{ .chezmoi.sourceDir }}/scripts/install_linux_tools.sh" gh mise ghq || {
        echo "Warning: Some tools may have failed to install"
        echo "You can run the script manually later: {{ .chezmoi.sourceDir }}/scripts/install_linux_tools.sh"
    }
else
    echo "Warning: Linux tools installation script not found"
fi

{{- end }}

# Install Rust tools via cargo (cross-platform)
echo "=== Installing Rust-based tools ==="
if [[ -f "{{ .chezmoi.sourceDir }}/scripts/install_rust_tools.sh" ]]; then
    echo "Running Rust tools installation script (with pre-built binaries + parallel install)..."
    bash "{{ .chezmoi.sourceDir }}/scripts/install_rust_tools.sh" || {
        echo "Warning: Some Rust tools may have failed to install"
        echo "You can run the script manually later: ~/.local/share/chezmoi/scripts/install_rust_tools.sh"
    }
else
    echo "Warning: Rust tools installation script not found"
fi

echo "✓ Package installation completed"
