name: Installation Testing

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    # Run nightly installation tests at 02:00 UTC
    - cron: '0 2 * * *'

jobs:
  test-fresh-installation:
    name: Test Fresh Installation
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Test on different OS versions
          - os: ubuntu-latest
            container: ubuntu:22.04
            install_method: curl
          - os: ubuntu-latest
            container: ubuntu:20.04
            install_method: curl
          - os: ubuntu-latest
            container: alpine:latest
            install_method: curl
          - os: ubuntu-latest
            container: fedora:latest
            install_method: curl
          - os: ubuntu-latest
            container: debian:bullseye
            install_method: curl
          # Test different installation methods
          - os: ubuntu-latest
            container: ubuntu:22.04
            install_method: git_clone
          - os: macos-latest
            install_method: curl
          - os: macos-13
            install_method: curl

    container: ${{ matrix.container }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup container environment
      if: matrix.container
      run: |
        echo "Setting up container environment for ${{ matrix.container }}"

        # Install basic tools based on container type
        if command -v apt-get &>/dev/null; then
          apt-get update -qq
          apt-get install -y curl git zsh sudo
        elif command -v apk &>/dev/null; then
          apk add --no-cache curl git zsh sudo bash
        elif command -v dnf &>/dev/null; then
          dnf install -y curl git zsh sudo which
        elif command -v yum &>/dev/null; then
          yum install -y curl git zsh sudo which
        fi

        # Create a test user (containers run as root by default)
        if ! id testuser &>/dev/null; then
          useradd -m -s /bin/bash testuser
          echo "testuser ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers
        fi

    - name: Test installation via curl (one-command install)
      if: matrix.install_method == 'curl'
      run: |
        echo "Testing one-command installation..."

        # Switch to test user if in container
        if [[ -n "${{ matrix.container }}" ]]; then
          su - testuser -c '
            export HOME=/home/testuser
            cd $HOME

            echo "Installing dotfiles via local install script..."
            bash $GITHUB_WORKSPACE/install

            # Verify installation
            test -f ~/.config/zsh/.zshrc || (echo "FAIL: .zshrc not created" && exit 1)
            test -f ~/.zshenv || (echo "FAIL: .zshenv not created" && exit 1)

            # Test zsh can load
            zsh -c "echo \"Installation successful\""
          '
        else
          # macOS or native Linux
          export INSTALL_DIR="$HOME/dotfiles-test"
          mkdir -p "$INSTALL_DIR"
          cd "$INSTALL_DIR"

          echo "Installing dotfiles via local install script..."
          bash "$GITHUB_WORKSPACE/install"

          # Verify installation
          test -f ~/.config/zsh/.zshrc || (echo "FAIL: .zshrc not created" && exit 1)
          test -f ~/.zshenv || (echo "FAIL: .zshenv not created" && exit 1)

          # Test zsh can load
          zsh -c "echo \"Installation successful\""
        fi

    - name: Test installation via git clone
      if: matrix.install_method == 'git_clone'
      run: |
        echo "Testing git clone installation method..."

        if [[ -n "${{ matrix.container }}" ]]; then
          su - testuser -c '
            export HOME=/home/testuser
            cd $HOME

            # Use current repository code
            cp -r $GITHUB_WORKSPACE dotfiles
            cd dotfiles

            # Install chezmoi
            sh -c "$(curl -fsLS get.chezmoi.io)" -- -b "$HOME/.local/bin"
            export PATH="$HOME/.local/bin:$PATH"

            # Initialize and apply
            chezmoi init --apply .

            # Verify installation
            test -f ~/.config/zsh/.zshrc || (echo "FAIL: .zshrc not created" && exit 1)
            test -f ~/.zshenv || (echo "FAIL: .zshenv not created" && exit 1)

            # Test zsh can load
            zsh -c "echo \"Git clone installation successful\""
          '
        else
          # macOS or native Linux
          export INSTALL_DIR="$HOME/dotfiles-test-git"
          mkdir -p "$INSTALL_DIR"
          cd "$INSTALL_DIR"

          # Use current repository code
          cp -r "$GITHUB_WORKSPACE" dotfiles
          cd dotfiles

          # Install chezmoi
          sh -c "$(curl -fsLS get.chezmoi.io)" -- -b "$HOME/.local/bin"
          export PATH="$HOME/.local/bin:$PATH"

          # Initialize and apply
          chezmoi init --apply .

          # Verify installation
          test -f ~/.config/zsh/.zshrc || (echo "FAIL: .zshrc not created" && exit 1)
          test -f ~/.zshenv || (echo "FAIL: .zshenv not created" && exit 1)

          # Test zsh can load
          zsh -c "echo \"Git clone installation successful\""
        fi

    - name: Test business environment installation
      run: |
        echo "Testing business environment installation..."

        if [[ -n "${{ matrix.container }}" ]]; then
          # Create another test user for business environment
          if ! id bizuser &>/dev/null; then
            useradd -m -s /bin/bash bizuser
            echo "bizuser ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers
          fi

          su - bizuser -c '
            export HOME=/home/bizuser
            export BUSINESS_USE=1
            cd $HOME

            echo "Installing dotfiles with BUSINESS_USE=1..."
            bash "$GITHUB_WORKSPACE/install"

            # Verify business-specific settings
            grep -q "BUSINESS_USE=1" ~/.zshenv || (echo "FAIL: BUSINESS_USE not set" && exit 1)

            # Test zsh can load with business config
            zsh -c "echo \"Business installation successful\""
          '
        else
          # Clean previous installation
          rm -rf ~/.config/zsh ~/.zshenv ~/.local/share/chezmoi 2>/dev/null || true

          export BUSINESS_USE=1
          bash "$GITHUB_WORKSPACE/install"

          # Verify business-specific settings
          grep -q "BUSINESS_USE=1" ~/.zshenv || (echo "FAIL: BUSINESS_USE not set" && exit 1)

          # Test zsh can load with business config
          zsh -c "echo \"Business installation successful\""
        fi

  test-upgrade-scenarios:
    name: Test Upgrade Scenarios
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup test environment
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y curl git zsh

    - name: Install previous version simulation
      run: |
        echo "Simulating previous installation..."

        # Create a mock previous installation
        mkdir -p ~/.config/zsh
        echo 'echo "Previous version loaded"' > ~/.config/zsh/.zshrc
        echo 'export PATH="$HOME/.local/bin:$PATH"' > ~/.zshenv

        # Create some user customizations
        echo 'alias myalias="echo hello"' > ~/.config/zsh/local.zsh

    - name: Test upgrade installation
      run: |
        echo "Testing upgrade over existing installation..."

        # Install new version
        bash "$GITHUB_WORKSPACE/install"

        # Verify upgrade worked
        test -f ~/.config/zsh/.zshrc || (echo "FAIL: .zshrc not updated" && exit 1)

        # Check that customizations are preserved
        if [[ -f ~/.config/zsh/local.zsh ]]; then
          grep -q "myalias" ~/.config/zsh/local.zsh && echo "✓ Local customizations preserved"
        fi

        # Test that new configuration loads
        zsh -c "echo \"Upgrade successful\""

  test-partial-installation:
    name: Test Partial Installation Scenarios
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup minimal environment
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y curl git

    - name: Test installation without zsh
      run: |
        echo "Testing installation when zsh is not available..."

        # Remove zsh to test fallback
        sudo apt-get remove -y zsh

        # Install should still work but with warnings
        if bash "$GITHUB_WORKSPACE/install"; then
          echo "✓ Installation completed despite missing zsh"
        else
          echo "✗ Installation failed when zsh missing"
          exit 1
        fi

    - name: Test installation with limited permissions
      run: |
        echo "Testing installation with limited permissions..."

        # Create a user without sudo access
        sudo useradd -m -s /bin/bash limiteduser

        # Test installation as limited user
        sudo -u limiteduser bash -c '
          export HOME=/home/limiteduser
          cd $HOME

          # This should work without sudo for user-level installation
          bash "$GITHUB_WORKSPACE/install" || true

          # Verify user-level files were created
          test -f ~/.config/zsh/.zshrc && echo "✓ User-level installation succeeded"
        '

  test-error-recovery:
    name: Test Error Recovery
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup test environment
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y curl git zsh

    - name: Test recovery from interrupted installation
      run: |
        echo "Testing recovery from interrupted installation..."

        # Simulate interrupted installation
        mkdir -p ~/.local/share/chezmoi
        git clone https://github.com/paveg/dotfiles.git ~/.local/share/chezmoi

        # Create partial state
        mkdir -p ~/.config
        echo "partial" > ~/.config/partial_file

        # Run installation again - should complete successfully
        bash "$GITHUB_WORKSPACE/install"

        # Verify completion
        test -f ~/.config/zsh/.zshrc || (echo "FAIL: Recovery installation failed" && exit 1)

        echo "✓ Recovery from interrupted installation successful"

    - name: Test handling of corrupt files
      run: |
        echo "Testing handling of corrupt configuration files..."

        # Create corrupt configuration
        mkdir -p ~/.config/zsh
        echo "invalid zsh syntax {{{" > ~/.config/zsh/.zshrc

        # Installation should handle this gracefully
        bash "$GITHUB_WORKSPACE/install"

        # Verify the corrupt file was replaced
        if zsh -n ~/.config/zsh/.zshrc; then
          echo "✓ Corrupt file was replaced with valid configuration"
        else
          echo "✗ Configuration file is still corrupt"
          exit 1
        fi

  test-performance:
    name: Test Installation Performance
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup test environment
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y curl git zsh time

    - name: Measure installation time
      run: |
        echo "Measuring installation performance..."

        start_time=$(date +%s)

        # Run installation
        bash "$GITHUB_WORKSPACE/install"

        end_time=$(date +%s)
        duration=$((end_time - start_time))

        echo "Installation completed in ${duration} seconds"

        # Installation should complete in reasonable time (less than 5 minutes)
        if [[ $duration -lt 300 ]]; then
          echo "✓ Installation performance acceptable"
        else
          echo "⚠ Installation took longer than expected: ${duration}s"
        fi

    - name: Measure shell startup time after installation
      run: |
        echo "Measuring shell startup performance..."

        # Measure startup time
        startup_time=$(time (zsh -i -c exit) 2>&1 | grep real | awk '{print $2}')
        echo "Shell startup time: $startup_time"

        # Convert to milliseconds for comparison
        if echo "$startup_time" | grep -q "m"; then
          # Format: 0m0.123s
          minutes=$(echo "$startup_time" | sed 's/m.*$//')
          seconds=$(echo "$startup_time" | sed 's/.*m//' | sed 's/s$//')
          total_ms=$(echo "($minutes * 60 + $seconds) * 1000" | bc -l)
        else
          # Format: 0.123s
          seconds=$(echo "$startup_time" | sed 's/s$//')
          total_ms=$(echo "$seconds * 1000" | bc -l)
        fi

        # Should be under 1 second
        if (( $(echo "$total_ms < 1000" | bc -l) )); then
          echo "✓ Shell startup performance good: ${total_ms}ms"
        else
          echo "⚠ Shell startup slower than expected: ${total_ms}ms"
        fi

  installation-summary:
    name: Installation Test Summary
    runs-on: ubuntu-latest
    needs: [test-fresh-installation, test-upgrade-scenarios, test-partial-installation, test-error-recovery, test-performance]
    if: always()
    steps:
    - name: Generate installation test summary
      run: |
        echo "# Installation Test Summary" > installation-summary.md
        echo "Generated on: $(date)" >> installation-summary.md
        echo "" >> installation-summary.md

        echo "## Test Results" >> installation-summary.md
        echo "- Fresh Installation: ${{ needs.test-fresh-installation.result }}" >> installation-summary.md
        echo "- Upgrade Scenarios: ${{ needs.test-upgrade-scenarios.result }}" >> installation-summary.md
        echo "- Partial Installation: ${{ needs.test-partial-installation.result }}" >> installation-summary.md
        echo "- Error Recovery: ${{ needs.test-error-recovery.result }}" >> installation-summary.md
        echo "- Performance: ${{ needs.test-performance.result }}" >> installation-summary.md
        echo "" >> installation-summary.md

        # Determine overall status
        if [[ "${{ needs.test-fresh-installation.result }}" == "success" && \
              "${{ needs.test-upgrade-scenarios.result }}" == "success" && \
              "${{ needs.test-partial-installation.result }}" == "success" && \
              "${{ needs.test-error-recovery.result }}" == "success" && \
              "${{ needs.test-performance.result }}" == "success" ]]; then
          echo "## Overall Status: ✅ ALL TESTS PASSED" >> installation-summary.md
          echo "Installation process is working correctly across all tested scenarios." >> installation-summary.md
        else
          echo "## Overall Status: ❌ SOME TESTS FAILED" >> installation-summary.md
          echo "Some installation scenarios need attention." >> installation-summary.md
        fi

    - name: Upload installation test summary
      uses: actions/upload-artifact@v4
      with:
        name: installation-test-summary
        path: installation-summary.md