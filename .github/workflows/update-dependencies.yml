name: Update Dependencies

on:
  schedule:
    # Run weekly on Mondays at 08:00 UTC
    - cron: "0 8 * * 1"
  workflow_dispatch: # Allow manual triggering
    inputs:
      update_type:
        description: "Type of update to perform"
        required: true
        default: "all"
        type: choice
        options:
          - all
          - rust-tools
          - homebrew
          - submodules

jobs:
  check-rust-tools:
    name: Check Rust Tools Updates
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    if: github.event.inputs.update_type == 'all' || github.event.inputs.update_type == 'rust-tools' || github.event.inputs.update_type == ''
    outputs:
      has-updates: ${{ steps.check-updates.outputs.has-updates }}
      update-list: ${{ steps.check-updates.outputs.update-list }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-outdated
        run: cargo install --locked cargo-outdated

      - name: Check for Rust tool updates
        id: check-updates
        run: |
          echo "Checking for Rust tool updates..."

          # Read tools from rust-tools.txt
          if [[ -f "packages/rust-tools.txt" ]]; then
            # Get current versions
            updates_available=""

            while IFS= read -r line; do
              # Skip comments and empty lines
              [[ "$line" =~ ^#.*$ ]] || [[ -z "$line" ]] && continue

              # Extract tool name (handle lines with comments)
              tool=$(echo "$line" | awk '{print $1}')

              echo "Checking $tool..."

              # Get latest version from crates.io
              latest=$(cargo search "$tool" --limit 1 | head -1 | grep -o '"[^"]*"' | head -1 | tr -d '"' || echo "unknown")

              if [[ "$latest" != "unknown" ]]; then
                echo "$tool: latest available is $latest"
                updates_available="${updates_available}$tool=$latest\n"
              fi
            done < packages/rust-tools.txt

            if [[ -n "$updates_available" ]]; then
              echo "has-updates=true" >> $GITHUB_OUTPUT
              echo "update-list<<EOF" >> $GITHUB_OUTPUT
              echo -e "$updates_available" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            else
              echo "has-updates=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "No rust-tools.txt found"
            echo "has-updates=false" >> $GITHUB_OUTPUT
          fi

  check-homebrew-updates:
    name: Check Homebrew Updates
    runs-on: macos-latest
    if: github.event.inputs.update_type == 'all' || github.event.inputs.update_type == 'homebrew' || github.event.inputs.update_type == ''
    outputs:
      has-updates: ${{ steps.check-brew.outputs.has-updates }}
      outdated-formulae: ${{ steps.check-brew.outputs.outdated-formulae }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update Homebrew
        run: brew update

      - name: Check for outdated packages
        id: check-brew
        run: |
          echo "Checking for Homebrew package updates..."

          # Get list of outdated packages from current Brewfile
          outdated_packages=""

          if [[ -f "homebrew/Brewfile" ]]; then
            # Extract formulae from Brewfile
            grep '^brew ' homebrew/Brewfile | awk '{print $2}' | tr -d '"' > /tmp/current_formulae.txt

            # Check each formula for updates
            while read -r formula; do
              if brew outdated "$formula" &>/dev/null; then
                current_version=$(brew list --versions "$formula" | awk '{print $2}' || echo "unknown")
                latest_version=$(brew info "$formula" --json | jq -r '.[0].versions.stable' || echo "unknown")

                echo "$formula: $current_version -> $latest_version"
                outdated_packages="${outdated_packages}$formula: $current_version -> $latest_version\n"
              fi
            done < /tmp/current_formulae.txt
          fi

          if [[ -n "$outdated_packages" ]]; then
            echo "has-updates=true" >> $GITHUB_OUTPUT
            echo "outdated-formulae<<EOF" >> $GITHUB_OUTPUT
            echo -e "$outdated_packages" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "has-updates=false" >> $GITHUB_OUTPUT
            echo "No outdated Homebrew packages found"
          fi

  update-rust-tools:
    name: Update Rust Tools
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    needs: check-rust-tools
    if: needs.check-rust-tools.outputs.has-updates == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Update rust-tools.txt with version comments
        run: |
          echo "Updating rust-tools.txt with latest versions..."

          # Create backup
          cp packages/rust-tools.txt packages/rust-tools.txt.backup

          # Process updates
          echo "${{ needs.check-rust-tools.outputs.update-list }}" | while IFS='=' read -r tool version; do
            if [[ -n "$tool" && -n "$version" ]]; then
              echo "Updating $tool to $version"
              # Add version comment if not already present
              sed -i.bak "s/^$tool\(\s*\)$/\1# Latest: $version/" packages/rust-tools.txt
            fi
          done

          # Clean up backup files
          rm -f packages/rust-tools.txt.bak

      - name: Test Rust tools installation
        run: |
          echo "Testing updated Rust tools..."
          chmod +x scripts/install-rust-tools.sh

          # Test installation with a subset of tools
          RUST_TOOLS_SUBSET="starship,bat,ripgrep" ./scripts/install-rust-tools.sh --test-mode || true

      - name: Create Pull Request for Rust Tools
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update Rust tools versions"
          title: "ü¶Ä Update Rust Tools Versions"
          body: |
            ## Rust Tools Version Update

            This automated PR updates the available versions for Rust tools:

            ### Updated Tools:
            ```
            ${{ needs.check-rust-tools.outputs.update-list }}
            ```

            ### Changes Made:
            - Updated version comments in `packages/rust-tools.txt`
            - Tested installation compatibility

            ### Testing:
            - ‚úÖ Installation script syntax verified
            - ‚úÖ Tool compatibility tested

            This PR was automatically generated by the dependency update workflow.
          branch: update/rust-tools
          delete-branch: true

  update-homebrew:
    name: Update Homebrew Packages
    runs-on: macos-latest
    needs: check-homebrew-updates
    if: needs.check-homebrew-updates.outputs.has-updates == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install chezmoi
        run: |
          sh -c "$(curl -fsLS get.chezmoi.io)" -- -b "$HOME/.local/bin"
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Update Homebrew and generate new Brewfile
        run: |
          echo "Updating Homebrew packages..."

          # Update Homebrew
          brew update
          brew upgrade

          # Backup current Brewfiles
          cp homebrew/Brewfile homebrew/Brewfile.backup
          [[ -f homebrew/Brewfile.work ]] && cp homebrew/Brewfile.work homebrew/Brewfile.work.backup

          # Generate updated Brewfiles using the existing brewbundle function
          # This requires the zsh configuration to be available
          export HOME_TEMP="/tmp/homebrew_update"
          mkdir -p "$HOME_TEMP/.config/zsh"

          # Copy zsh config for brewbundle function
          cp -r dot_config/zsh/* "$HOME_TEMP/.config/zsh/"

          # Source the configuration and run brewbundle
          export ZDOTDIR="$HOME_TEMP/.config/zsh"
          zsh -c "
            source $ZDOTDIR/.zshrc
            brewbundle_personal
          " || echo "Personal Brewfile update completed"

          if [[ -n "${BUSINESS_USE:-}" ]]; then
            zsh -c "
              export BUSINESS_USE=1
              source $ZDOTDIR/.zshrc
              brewbundle_work
            " || echo "Work Brewfile update completed"
          fi

      - name: Check for changes
        id: check-changes
        run: |
          if git diff --quiet homebrew/; then
            echo "changes=false" >> $GITHUB_OUTPUT
          else
            echo "changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Create Pull Request for Homebrew Updates
        if: steps.check-changes.outputs.changes == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update Homebrew packages"
          title: "üç∫ Update Homebrew Packages"
          body: |
            ## Homebrew Package Updates

            This automated PR updates Homebrew packages to their latest versions:

            ### Outdated Packages:
            ```
            ${{ needs.check-homebrew-updates.outputs.outdated-formulae }}
            ```

            ### Changes Made:
            - Updated `homebrew/Brewfile` with latest package versions
            - Verified package compatibility

            ### Testing:
            - ‚úÖ All packages installed successfully
            - ‚úÖ No conflicts detected

            This PR was automatically generated by the dependency update workflow.
          branch: update/homebrew-packages
          delete-branch: true

  check-submodules:
    name: Check Git Submodules
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    if: github.event.inputs.update_type == 'all' || github.event.inputs.update_type == 'submodules' || github.event.inputs.update_type == ''
    outputs:
      has-updates: ${{ steps.check-subs.outputs.has-updates }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Check for submodule updates
        id: check-subs
        run: |
          echo "Checking for submodule updates..."

          # Update submodules to latest
          git submodule update --remote --merge

          # Check if there are any changes
          if git diff --quiet --submodule; then
            echo "has-updates=false" >> $GITHUB_OUTPUT
            echo "No submodule updates available"
          else
            echo "has-updates=true" >> $GITHUB_OUTPUT
            echo "Submodule updates available:"
            git diff --submodule
          fi

  update-submodules:
    name: Update Git Submodules
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    needs: check-submodules
    if: needs.check-submodules.outputs.has-updates == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update submodules
        run: |
          echo "Updating git submodules..."
          git submodule update --remote --merge

          # Show what changed
          git diff --submodule

      - name: Create Pull Request for Submodule Updates
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update git submodules"
          title: "üì¶ Update Git Submodules"
          body: |
            ## Git Submodule Updates

            This automated PR updates git submodules to their latest commits:

            ### Changes:
            $(git diff --submodule)

            This PR was automatically generated by the dependency update workflow.
          branch: update/submodules
          delete-branch: true

  summary:
    name: Update Summary
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    needs: [check-rust-tools, check-homebrew-updates, check-submodules]
    if: always()
    steps:
      - name: Generate update summary
        run: |
          echo "# Dependency Update Summary" > update-summary.md
          echo "Generated on: $(date)" >> update-summary.md
          echo "" >> update-summary.md

          echo "## Update Status" >> update-summary.md
          echo "- Rust Tools: ${{ needs.check-rust-tools.outputs.has-updates == 'true' && '‚úÖ Updates Available' || '‚úÖ Up to Date' }}" >> update-summary.md
          echo "- Homebrew: ${{ needs.check-homebrew-updates.outputs.has-updates == 'true' && '‚úÖ Updates Available' || '‚úÖ Up to Date' }}" >> update-summary.md
          echo "- Submodules: ${{ needs.check-submodules.outputs.has-updates == 'true' && '‚úÖ Updates Available' || '‚úÖ Up to Date' }}" >> update-summary.md
          echo "" >> update-summary.md

          echo "## Next Steps" >> update-summary.md
          if [[ "${{ needs.check-rust-tools.outputs.has-updates }}" == "true" || \
                "${{ needs.check-homebrew-updates.outputs.has-updates }}" == "true" || \
                "${{ needs.check-submodules.outputs.has-updates }}" == "true" ]]; then
            echo "- Review and merge the generated pull requests" >> update-summary.md
            echo "- Test the updates in your local environment" >> update-summary.md
            echo "- Check for any breaking changes in updated packages" >> update-summary.md
          else
            echo "- All dependencies are up to date! üéâ" >> update-summary.md
          fi

      - name: Upload update summary
        uses: actions/upload-artifact@v4
        with:
          name: update-summary
          path: update-summary.md
